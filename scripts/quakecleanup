#!/usr/bin/env bash

thisdir=$(dirname $(readlink -f $0))

source "$thisdir"/quakelaunch.conf

shopt -s extglob

# Function to choose from a random set of error beeps and play it.
function beep {
  if [[ -n "$beep_player" && ${#beepsound[@]} -ne 0 ]]
  then
    "$beep_player" ${beepsound[$RANDOM % ${#beepsound[@]}]}
  fi
}

# Function to print a message. Then post it as a notification and/or beep.
function message {
  echo $1
  if [[ -n "$notification_icon" ]]
  then
    notify-send --icon="$notification_icon" "$1" --hint=string:desktop-entry:quakecleanup
  fi
  beep
}

# Function to print usage statement and beep.
function usage {
  message "usage: quakecleanup gamedir|foo.quake"
}

# Function to make sure the config has been populated with what we need.
function basic_validation {
  if [[ -z "$basedir" ]]
  then
    message "necessary option(s) in quakelaunch.conf have not been specified"
    exit 1
  fi
}

# Validate there's exactly one arg.
if [[ -n "$2" || -z "$1" ]]
then
  usage
  exit 1
fi

# Function to determine the directory a shortcut points at.
function gamedir_for_shortcut {
  shortcut="$1"
  gamedir=$(cat "$shortcut")
  gamedir=${gamedir##+([[:space:]])}
  gamedir=${gamedir%%+([[:space:]])}
  if [[ -z "$gamedir" ]]
  then
    basic_validation
    gamedir=$(basename "$shortcut")
    if [[ -z "$userdata_home" || "$install_to_userdata" != "true" ]]
    then
      gamedir="$basedir"/"${gamedir%.*}"
    else
      gamedir="$userdata_home"/"${gamedir%.*}"
    fi
  fi
  echo "$gamedir"
}

arg="$1"
gamedir=""

if [[ -f "$arg" ]]
then
  if [[ "${arg##*.}" == "quake" ]]
  then
    gamedir=$(gamedir_for_shortcut "$arg")
  else
    usage
    exit 1
  fi
else
  gamedir="$arg"
fi
mod=$(basename "$gamedir")

# Before we make any further decisions, do an initial source of any
# quakelaunch.conf in the targeted directory to see if it has redefined
# basedir or userdata_home.
if [[ -f "$gamedir"/quakelaunch.conf ]]
then
  source "$gamedir"/quakelaunch.conf
fi

# There could theoretically be multiple shortcuts that point at this gamedir.
# Delete any shortcut in shortcuts_dir that points at either basedir/mod or
# userdata_home/mod.
if [[ -n "$shortcuts_dir" && -d "$shortcuts_dir" ]]
then
  for file in $(ls -1 "$shortcuts_dir"/*.quake 2> /dev/null)
  do
    target=$(gamedir_for_shortcut "$file")
    if [[ "$target" == "$basedir"/"$mod" ]]
    then
      rm -f "$file"
    else
      if [[ -n "$userdata_home" && "$target" == "$userdata_home"/"$mod" ]]
      then
        rm -f "$file"
      fi
    fi
  done
fi

# Delete the corresponding subdirectory of basedir, unless installs are set to
# happen under userdata_home.
if [[ -z "$userdata_home" || "$install_to_userdata" != "true" ]]
then
  if [[ -d "$basedir"/"$mod" ]]
  then
    rm -rf "$basedir"/"$mod"
  fi
fi

# If userdata_home is set, delete the corresponding subdirectory there.
if [[ -n "$userdata_home" && -d "$userdata_home"/"$mod" ]]
then
  rm -rf "$userdata_home"/"$mod"
fi
